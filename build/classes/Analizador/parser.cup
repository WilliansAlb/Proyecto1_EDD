package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import proyecto1_edd.*;

parser code
{:
    private Symbol sym;
    
    public Symbol getS(){
        return this.sym;
    }

    public ListaCapas lista_capas = new ListaCapas();
    public ArbolUsuarios arbol_usr = new ArbolUsuarios();
    private ListaImagenes lista_imgs = new ListaImagenes();
    public Capa temp_capa = new Capa();
    public NodoUsuario temp_usr = new NodoUsuario();
    public Matriz dispersa = new Matriz();

    public void imp(String texto){
        System.out.println(texto);
    }

    public void agregandoCapa(String id){
        temp_capa.setId(Integer.parseInt(id)); 
        temp_capa.setDispersa(dispersa); 
        lista_capas.insertarCapa(temp_capa); 
        dispersa = new Matriz(); 
        temp_capa = new Capa();
    }

    public void setLista_imgs(ListaImagenes lista_imgs){
        this.lista_imgs = lista_imgs;
    }

    public void agregandoUsuarioImagen(String id_img){
        int idimg = Integer.parseInt(id_img);
        Imagen prueba = lista_imgs.obtener_imagen(idimg);
        if (prueba!=null){
            UsuarioImagen nuimg = new UsuarioImagen();
            nuimg.setId(idimg);
            nuimg.setActual(prueba);
            temp_usr.agregar_nodo(nuimg);
        } else {
            imp("no existe la imagen");
        }
    }

    public void agregandoUsuario(String nombre){
        temp_usr.setNombreUsuario(nombre);
        arbol_usr.insertar(temp_usr);
        temp_usr = new NodoUsuario();
    }

    public void agregandoNodo(String f1, String c1, String h1){
        dispersa.agregarNodo(h1, Integer.parseInt(c1), Integer.parseInt(f1));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    protected int error_sync_size() {
        return 1;
    }

:};

terminal PARENTESISA,PARENTESISC,NUMERO,HEXA,COMA,PUNTOC,LLAVEA,LLAVEC,DOSP,NOMBRE;
non terminal capas, capasP, bloque_param, params, bloque_paramP, capa, inicio, usuarios, lista1,usuariosP, 
    usuario, lista_imagenes, lista_imagenesP;


start with inicio;

inicio::=
    capas
    | usuarios
;

usuarios::=
    usuario usuariosP
;

usuariosP::=
    | usuarios
;

usuario::=
    NOMBRE:u1 DOSP lista1 PUNTOC {: agregandoUsuario(u1.toString()); :}
;

lista1::=
    | lista_imagenes
;

lista_imagenes::=
    NUMERO:n1 lista_imagenesP {: agregandoUsuarioImagen(n1.toString()); :}
;

lista_imagenesP::=
    | COMA lista_imagenes
;

capas::=
    capa capasP
;

capasP::=
    | capas
;

capa::=
    NUMERO:n1 PARENTESISA bloque_param PARENTESISC {: agregandoCapa(n1.toString()); :}
;

bloque_param ::=
    params bloque_paramP
;

bloque_paramP::=
    | bloque_param
;

params::=
    NUMERO:f1 COMA NUMERO:c1 COMA HEXA:h1 PUNTOC {: agregandoNodo(f1.toString(), c1.toString(), h1.toString()); :}
;
