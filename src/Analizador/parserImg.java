
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import proyecto1_edd.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserImg extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symImg.class;
}

  /** Default constructor. */
  @Deprecated
  public parserImg() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserImg(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserImg(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\004\000\002\005" +
    "\002\000\002\005\003\000\002\006\006\000\002\004\002" +
    "\000\002\004\003\000\002\003\004\000\002\007\002\000" +
    "\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\004\004\004\001\002\000\004\006\012\001" +
    "\002\000\004\002\011\001\002\000\006\002\uffff\004\004" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002\000\006\004\013\007\ufffc" +
    "\001\002\000\006\005\017\007\ufff9\001\002\000\004\007" +
    "\016\001\002\000\004\007\ufffb\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\004\004\013\001\002\000\004\007" +
    "\ufffa\001\002\000\004\007\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\006\005\007\006\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\014\004\013\001\001\000\004\007\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\020\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserImg$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserImg$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserImg$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Symbol getS(){
        return this.sym;
    }

    public ListaImagenes lista_img = new ListaImagenes();
    private ListaCapas lista_capas = new ListaCapas();
    public Capa temp_capa = new Capa();
    public Imagen temp_img = new Imagen();
    public Matriz dispersa = new Matriz();

    public void imp(String texto){
        System.out.println(texto);
    }
    
    public void setLista_capas(ListaCapas lista_capas){
        this.lista_capas = lista_capas;
    }

    public void agregando_imagen(String imagen){
        temp_img.setId(Integer.parseInt(imagen));
        lista_img.agregar_imagen(temp_img);
        temp_img = new Imagen();
    }

    public void agregando_capa_imagen(String capa){
        int num_capa = Integer.parseInt(capa);
        Capa obtenida = lista_capas.buscarCapa(num_capa);
        if (obtenida!=null){
            NodoImagen ing = new NodoImagen(num_capa,obtenida);
            temp_img.agregar_nodo(ing);
            imp("existe y fue agregada");
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserImg$actions {
  private final parserImg parser;

  /** Constructor */
  CUP$parserImg$actions(parserImg parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserImg$do_action_part00000000(
    int                        CUP$parserImg$act_num,
    java_cup.runtime.lr_parser CUP$parserImg$parser,
    java.util.Stack            CUP$parserImg$stack,
    int                        CUP$parserImg$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserImg$result;

      /* select the action based on the action number */
      switch (CUP$parserImg$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= imagenes EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).value;
		RESULT = start_val;
              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserImg$parser.done_parsing();
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // imagenes ::= imagen imagenesP 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("imagenes",0, ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // imagenesP ::= 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("imagenesP",3, ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imagenesP ::= imagenes 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("imagenesP",3, ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imagen ::= NUMERO LLAVEA lista2 LLAVEC 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parserImg$stack.elementAt(CUP$parserImg$top-3)).value;
		 agregando_imagen(i1.toString());
              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("imagen",4, ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-3)), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista2 ::= 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("lista2",2, ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista2 ::= bloque_imagenes 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("lista2",2, ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_imagenes ::= NUMERO bloque_imagenesP 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)).value;
		 agregando_capa_imagen(c1.toString());
              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("bloque_imagenes",1, ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_imagenesP ::= 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("bloque_imagenesP",5, ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_imagenesP ::= COMA bloque_imagenes 
            {
              Object RESULT =null;

              CUP$parserImg$result = parser.getSymbolFactory().newSymbol("bloque_imagenesP",5, ((java_cup.runtime.Symbol)CUP$parserImg$stack.elementAt(CUP$parserImg$top-1)), ((java_cup.runtime.Symbol)CUP$parserImg$stack.peek()), RESULT);
            }
          return CUP$parserImg$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserImg$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserImg$do_action(
    int                        CUP$parserImg$act_num,
    java_cup.runtime.lr_parser CUP$parserImg$parser,
    java.util.Stack            CUP$parserImg$stack,
    int                        CUP$parserImg$top)
    throws java.lang.Exception
    {
              return CUP$parserImg$do_action_part00000000(
                               CUP$parserImg$act_num,
                               CUP$parserImg$parser,
                               CUP$parserImg$stack,
                               CUP$parserImg$top);
    }
}

}
